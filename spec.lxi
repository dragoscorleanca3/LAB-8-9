%{
#include <math.h>
#include <stdio.h>
#include "y.tab.h"
int lines = 0;
%}
%option noyywrap

DIGIT 		[0-9]
NUMBER		[1-9][0-9]*|0
STRING		["]([a-zA-Z])*["]
CONSTANT    {STRING}|{NUMBER}
ID 		    [a-zA-Z][a-zA-Z0-9]{0,10}

%%

"array"	    {printf( "Reserved word: %s\n", yytext );  return array;}
"char"       {printf( "Reserved word: %s\n", yytext );  return char;}
"const"	    {printf( "Reserved word: %s\n", yytext );  return const;}
"while"	{printf( "Reserved word: %s\n", yytext );  return while;}
"else"	{printf( "Reserved word: %s\n", yytext );  return else;}
"if"	    {printf( "Reserved word: %s\n", yytext );  return if;}
"int"	    {printf( "Reserved word: %s\n", yytext );  return int;}
"input"	    {printf( "Reserved word: %s\n", yytext );  return input;}
"output"	{printf( "Reserved word: %s\n", yytext );  return output;}
"string"	{printf( "Reserved word: %s\n", yytext );  return string;}
"program"	    {printf( "Reserved word: %s\n", yytext );  return program;}
"not"	{printf( "Reserved word: %s\n", yytext );  return not;}


{ID}	    {printf( "Identifier: %s\n", yytext ); return IDENTIFIER;}

{CONSTANT}	{printf( "Constant: %s\n", yytext ); return CONSTANT;}

";"	   {printf( "Separator: %s\n", yytext ); return SEMI_COLON;}
"+"	   {printf( "Operator: %s\n", yytext ); return PLUS;}
"-"	   {printf( "Operator: %s\n", yytext ); return MINUS;}
"*"	   {printf( "Operator: %s\n", yytext ); return ASTERISK;}
"/"	   {printf( "Operator: %s\n", yytext ); return DIVIDE;}
"("	   {printf( "Separator: %s\n", yytext ); return LEFT_PARANTHESIS;}
")"	   {printf( "Separator: %s\n", yytext ); return RIGHT_PARANTHESIS;}
"["	   {printf( "Separator: %s\n", yytext ); return LEFT_BRACKETS;}
"]"	   {printf( "Separator: %s\n", yytext ); return RIGHT_BRACKETS;}
"{"    {printf( "Separator: %s\n", yytext ); return LEFT_CURLY_BRACKETS;}
"}"    {printf( "Separator: %s\n", yytext ); return RIGHT_CURLY_BRACKETS;}

"<"	   {printf( "Operator: %s\n", yytext ); return L;}
">"	   {printf( "Operator: %s\n", yytext ); return G;}
"<="   {printf( "Operator: %s\n", yytext ); return LE;}
">="   {printf( "Operator: %s\n", yytext ); return GE;}
"=="   {printf( "Operator: %s\n", yytext ); return EQUAL;}
"="	   {printf( "Operator: %s\n", yytext ); return ASSIGN;}

"&"	   {printf( "Operator: %s\n", yytext ); return AMPERSAND;}
"|"	   {printf( "Operator: %s\n", yytext ); return BAR;}
"&&"	   {printf( "Operator: %s\n", yytext ); return AND;}
"||"	   {printf( "Operator: %s\n", yytext ); return OR;}

[ \t]+	/* remove spaces */  	{}

[\n]+	{++lines;}

[a-zA-Z][a-zA-Z0-9]{11,}	{printf("Illegal size of the identifier at line %d\n", lines); return -1;}

[0-9][a-zA-Z0-9]{0,10}	{printf("Illegal identifier at line %d\n", lines); return -1;}

.	{printf("Illegal symbol at line\n"); return -1;}
%%
